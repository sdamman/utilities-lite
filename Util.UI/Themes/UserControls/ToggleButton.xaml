<UserControl x:Class="ALMACO.UI.UserControls.ToggleButton"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:theme="clr-namespace:ALMACO.UI"
             mc:Ignorable="d"
             DataContext="{Binding RelativeSource={RelativeSource Self}}"
             d:Background="BlanchedAlmond">
  <!--The DataContext of the UserControl is bound to itself in order to access the OptionList
      property.  This self-binding does require special consideration when applying data-binding
      to the OptionList and SelectedOption properties during usage of this UserControl.
      See notes on Usage below.-->

  <!-- ********* Usage *************** -->
  <!-- The usage example below shows the ToggleButton control being used in a Window. The 
       DataContext of the Window (a ViewModel) contains a List<string> called 'ListOfTwoStrings' 
       that is bound to the the OptionList property of the ToggleButton.  The ViewModel also
       has a string property called 'SelectedString' that is bound to the SelectedOption property
       of the ToggleButton.  This binding must be set as OneWayToSource.-->
  
  <!-- <ToggleButton OptionList="{Binding Path=DataContext.ListOfTwoStrings,
                     RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
                     SelectedOption="{Binding Path=DataContext.SelectedString, 
                     RelativeSource={RelativeSource AncestorType={x:Type Window}}, 
                     Mode=OneWayToSource}"/>" -->
  
  <!-- Because of the internal data-binding occurring within the ToggleButton using its own
       DependencyProperties, when binding to those properties from outside the control, the
       'RelativeSource AncestorType....' construct must be used.  This explicitly directs the
       data binding to navigate up the tree and look at the Window-level to get a DataContext
       instead of the DataContext that is already bound internally to the ToggleButton.-->


  <UserControl.Resources>
    <!-- ControlTemplate for the CheckBox that is restyled as the toggle graphic. -->
    <ControlTemplate x:Key="ToggleTemplate" TargetType="{x:Type CheckBox}">
      <!-- The Canvas holds the two Path objects that make up thee toggle.  A width and height
           of 40 and 20 were chosen to match the size of the background object which in turn
           was sized to fit well with the 'bodyyCopy' text style.-->
      <Canvas Cursor="Hand"
              Width="40" Height="20">
        <!-- Path object used for the background.  Must be named so that it can be referenced
             in the ControlTemplate.Triggers below. -->
        <Path Name="bg"
              Data="M 10,0 A 10,10 0 0 0 0,10 10,10 0 0 0 10,20 H 30 
              A 10,10 0 0 0 40,10 10,10 0 0 0 30,0 Z"
              Fill="{theme:ThemeResource ResourceKey=TabItemStaticBackground}"
              d:Fill="{StaticResource brushDark60}"/>
        <!-- Path object used for the movable part of the toggle, often called the thumb or the
             slider.  Must be named so that it can be referenced in the 
             ControlTemplate.Triggers below. -->
        <Path Name="slider"
              Data="m 20,10 a 10,10 0 0 1 -10,10 
              A 10,10 0 0 1 0,10 10,10 0 0 1 10,0 10,10 0 0 1 20,10 Z"
              Fill="{theme:ThemeResource ResourceKey=BlueButtonBackground}"
              d:Fill="{StaticResource brushCombineBlue}"/>
      </Canvas>
      <!-- ControlTemplate.Triggers alter the appearance of the items in the template based on
           various conditions.  For instance if the IsChecked property is true, the corresponding
           trigger moves the 'slider' 20 units to the right.
           The Triggers shown below are rudimentary and cover only the most basic functionality.-->
      <ControlTemplate.Triggers>
        <Trigger Property="IsEnabled" Value="false">
          <Setter TargetName="bg" 
                  Property="Opacity" Value="0.4" />
        </Trigger>
        <Trigger Property="IsMouseOver" Value="true">
          <Setter TargetName="slider" 
                  Property="Fill" 
                  Value="{theme:ThemeResource ResourceKey=DarkBlue}" />
        </Trigger>
        <Trigger Property="IsChecked" Value="true">
          <Setter TargetName="slider" 
                  Property="Canvas.Left" Value="20" />
        </Trigger>
        <Trigger Property="IsChecked" Value="false">
          <Setter TargetName="slider" 
                  Property="Canvas.Left" Value="0" />
        </Trigger>
      </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <!-- Sets up a new Style called ToggleStyle and assigns 'ToggleTemplate' to the 
         Template property of this new style.-->
    <Style x:Key="ToggleStyle" TargetType="{x:Type CheckBox}">
      <Setter Property="Template" Value="{DynamicResource ToggleTemplate}" />
    </Style>
    
    <!-- Set up a new Style called ToggleList and set the TargetType to ListBox.-->
    <Style x:Key="ToggleList" TargetType="{x:Type ListBox}">
      <!-- Turn off all the normal ListBox behaviors for scrolling and panning.-->
      <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
      <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled"/>
      <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
      <Setter Property="ScrollViewer.PanningMode" Value="None"/>
      <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
      <Setter Property="VerticalContentAlignment" Value="Center"/>
      <!-- Create a custom ControlTemplate for the ListBox.-->
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type ListBox}">
            <Grid>
              <!-- Set up a 3-column grid. -->
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Grid.Resources>
                <!-- Declare that all text in this grid will use the 'bodyCopy' style and will
                     also have a horizontal margin of 5 and a vertical margin of 3.-->
                <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource bodyCopy}">
                  <Setter Property="Margin" Value="5,3"/>
                </Style>
              </Grid.Resources>
              <!-- In the first column of the grid, display the first item in the OptionList.-->
              <TextBlock Grid.Column="0"
                         Text="{Binding OptionList[0], FallbackValue='1'}"
                         HorizontalAlignment="Right"/>
              <!-- In the middle column, put a CheckBox with Style property set to ToggleStyle.
                   Bind the IsChecked property to the IsChecked property of the DataContext.-->
              <CheckBox Grid.Column="1"
                        Style="{StaticResource ToggleStyle}"
                        IsChecked="{Binding IsChecked}"/>
              <!-- In the last column of the grid, display the second item in the OptionList.-->
              <TextBlock Grid.Column="2" 
                         Text="{Binding OptionList[1], FallbackValue='2'}"
                         HorizontalAlignment="Left"/>
            </Grid>
            <ControlTemplate.Triggers>
              <!-- If the control is disabled, set the opacity to 40%.-->
              <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.4"/>
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
  </UserControl.Resources>

  <!-- The actual user control is just a ListBox with a re-styled ControlTemplate.
       Bind the ItemsSource to the OptionList property of DataContext and SelectedItem to the
       SelectedOption property of the DataContext.-->
  <ListBox Style="{DynamicResource ToggleList}" 
           ItemsSource="{Binding OptionList, FallbackValue='12'}"
           SelectedItem="{Binding SelectedOption}"/>
  
  <!---->

</UserControl>
